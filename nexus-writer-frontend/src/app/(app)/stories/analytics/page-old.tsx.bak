'use client'
import { useStories } from "@/app/hooks/useStories";
import { useAnalyticsPage } from "@/app/hooks/useAnalyticsPage";
import { useRouter } from "next/navigation";
import { useState } from "react";
import { BarChartConfig, DataPoint, StoryCardProps, TargetResponse } from "@/app/types";
import StoryList from "@/components/ui/StoryList/StoryList";
import DashboardFilterBar from "@/components/ui/DashboardFilterBar/DashboardFilterBar";
import TotalWordsCard from "@/components/ui/TotalWordsCard/TotalWordsCard";
import AverageWordsPerMinuteCard from "@/components/ui/AverageWordsPerMinuteCard/AverageWordsPerMinuteCard";
import TotalDurationCard from "@/components/ui/TotalDurationCard/TotalDurationCard";
import BarChart from "@/components/ui/BarChart/BarChart";
import TargetForm from "@/components/ui/TargetForm/TargetForm";
import AnalyticsPageHeader from "./components/AnalyticsPageHeader/AnalyticsPageHeader";
import LoadingSkeleton from "./components/LoadingSkeleton/LoadingSkeleton";
import EmptyAnalyticsState from "./components/EmptyAnalyticsState/EmptyAnalyticsState";
import styles from './page.module.css'

type FormVisibilityState = {
    visible: boolean,
    mode: 'creating' | 'editing' | 'deleting',
    selectedTarget?: TargetResponse,
    storyId?: string
}

export default function Page() {

    const {
        stories,
        isLoading,
        isError
    } = useStories()

    const {
        selectedStoryAnalytics,
        isLoadingStoryAnalytics,
        selectStory,
        clearSelection
    } = useStoryAnalytics()

    const [filters, setFilters] = useState<DashboardFilter>({
        frequency: 'Daily' as Frequency,
        fromDate: new Date(new Date().setDate(new Date().getDate() - 30)),
        toDate: new Date()
    })

    const [formVisibilityState, setFormVisibilityState] = useState<FormVisibilityState>({
        visible: false,
        mode: 'creating',
        selectedTarget: undefined
    })

    useEffect(() => {
        if (isError) {
            console.error('Error fetching analytics data:', isError);
            alert('Error fetching analytics data. Please try again later.');
        }
    }, [isError])

    const handleOnShowTargetForm = (
        mode: 'creating' | 'editing' | 'deleting',
        selectedTarget?: TargetResponse,
        storyId?: string
    ) => {
        switch (mode) {
            case 'creating':
                setFormVisibilityState({
                    visible: true,
                    mode: 'creating',
                    selectedTarget: selectedTarget,
                    storyId
                })
                break
            case 'editing':
                setFormVisibilityState({
                    visible: true,
                    mode: 'editing',
                    selectedTarget: selectedTarget,
                    storyId
                })
                break
            case 'deleting':
                setFormVisibilityState({
                    visible: true,
                    mode: 'deleting',
                    selectedTarget: selectedTarget,
                    storyId
                })
                break
            default:
                break
        }
    }

    const getStoryListItemProps = (stories: StoryCardProps[], filters: DashboardFilter) => {
        if (!stories) return []
        return stories.map((story: StoryCardProps) => {
                return {
                    storyId: story.id,
                    title: story.title,
                    status: story.status,
                    wordCount: story.wordCount || 0,
                    handleOnClick: () => selectStory(story.id, filters),
                    handleClearSelection: clearSelection,
                    handleOnShowTargetForm: handleOnShowTargetForm
                };
            }
        )
    }

    const getTransformedTimeSeries = (data: WordsWrittenRecord[]): DataPoint[] => {
        return data.map((record) => {
            return {
                name: record.date.toISOString().split('T')[0],
                wordsWritten: record.totalWords
            }
        })
    }

    const analyticsDataIsAvailable = (
        selectedStoryAnalytics
            && selectedStoryAnalytics.kpis
            && selectedStoryAnalytics.target
            && typeof selectedStoryAnalytics.kpis.totalDuration === 'number'
            && typeof selectedStoryAnalytics.kpis.totalWords === 'number'
            && typeof selectedStoryAnalytics.target.quota === 'number'
            && typeof selectedStoryAnalytics.kpis.avgWordsPerMinute === 'number'
            && selectedStoryAnalytics.wordsOverTime.length >= 0
    )
        
    const BARCHART_CONFIG: BarChartConfig = {
        width: 800,
        height: 400,
        dataKey: 'wordsWritten',
        barFill: '#8884d8',
        // You can change this to match your app's color scheme
        referenceLineConfig: {
            value: selectedStoryAnalytics?.target?.quota || 0,
            stroke: '#ff7300',
            strokeWidth: 2,
            strokeDashArray: '5 5',
            label: {
                value: 'Target',
                position: 'right',
                fill: '#ff7300',
                fontSize: 14,
                fontWeight: 600,
                fontFamily: 'inherit',
                offset: 10
            }
        }
    }

    return (
        <div className={styles['story-analytics-page']}>
            {/* Sidebar with story list items */}
            <StoryList
                storiesLoading={isLoading}
                stories={getStoryListItemProps(stories, filters)}
            />
            {/* container for dashboard */}
            <div className={styles['dashboard-container']}>
                {/* Dashboard filter bar */}
                <DashboardFilterBar
                    filter={filters}
                    onFilterChange={(newFilters) => setFilters(newFilters)}
                />

                {!selectedStoryAnalytics && !isLoadingStoryAnalytics && (
                    <div className={styles['empty-state']}>
                        <h2>Select a story to view analytics</h2>
                        <p>Choose a story from the sidebar to see detailed analytics and insights.</p>
                    </div>
                )}

                {isLoadingStoryAnalytics && (<div className={styles['loading-state']}>Loading analytics...</div>)}
                {analyticsDataIsAvailable && (
                    <>
                        {/* KPI cards */}
                        <div className={styles['kpi-cards']}>
                            <TotalWordsCard
                                totalWords={selectedStoryAnalytics.kpis.totalWords}
                                quota={selectedStoryAnalytics.target.quota}
                            />
                            <AverageWordsPerMinuteCard
                                averageWordsPerMinute={selectedStoryAnalytics.kpis.avgWordsPerMinute}
                            />
                            <TotalDurationCard
                                totalDuration={selectedStoryAnalytics.kpis.totalDuration}
                            />
                        </div>
                        {/* Bar chart */}
                        <div>
                            <BarChart
                                data={getTransformedTimeSeries(selectedStoryAnalytics.wordsOverTime)}
                                config={BARCHART_CONFIG}
                            />
                        </div>
                    </>
                )}
            </div>
            {/* Modal for target form */}
            {formVisibilityState.visible && (
                <TargetForm
                    storyId={formVisibilityState.storyId || selectedStoryAnalytics?.target?.storyId || ''}
                    isOpen={formVisibilityState.visible}
                    mode={formVisibilityState.mode}
                    onClose={() => setFormVisibilityState({visible: false, mode: 'creating', selectedTarget: undefined, storyId: undefined})}
                    onSave={() => setFormVisibilityState({visible: false, mode: 'creating', selectedTarget: undefined, storyId: undefined})}
                    onCancel={() => setFormVisibilityState({visible: false, mode: 'creating', selectedTarget: undefined, storyId: undefined})}
                />
            )}
        </div>
    )
}